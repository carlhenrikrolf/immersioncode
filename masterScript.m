%% Load net
disp('loading net');
net = load('../nets/imagenet-caffe-alex.mat') ; % Load the network
net = vl_simplenn_tidy(net) ; % update and fill in values

%% Parameters
Ns = 1:21; % layer of enquiry, out of 21
seed = 1995;
rng(seed);

%% Creating sets
tic
disp('creating stimuli');
[normalTrainSet, normalTestSet, normalTrainAnswers, normalTestAnswers] = makeTrainingAndTestingSampleSets();
[crowdedTrainSet, crowdedTestSet, crowdedTrainAnswers, crowdedTestAnswers] = makeCrowdedTrainingAndTestingSampleSets();

% len = length(normalTrainAnswers) + length(crowdedTrainAnswers);
% shuffling = randperm(len);
% tempSet = cat(3,normalTrainSet,crowdedTrainSet);
% tempSet = tempSet(shuffling);
% tempAnswers = cat(2,normalTrainAnswers,crowdedTrainAnswers);
% tempAnswers = tempAnswers(shuffling);

trainSet = normalTrainSet;
trainAnswers = normalTrainAnswers;

%%
tic
normalTrainMSEs = zeros(length(Ns),1);
normalTestMSEs = zeros(length(Ns),1);
crowdedTrainMSEs = zeros(length(Ns),1);
crowdedTestMSEs = zeros(length(Ns),1);
disp('starting hyperloop')
for k = 1:2
    if k == 1
        testSet = normalTestSet;
        testAnswers = normalTestAnswers;
    else
        testSet = crowdedTestSet;
        testAnswers = crowdedTestAnswers;
    end

toc
% %%
% processedTestSet = processImages(testSet, net);
% processedTrainSet = processImages(trainSet, net);
% toc
% %% Run through pretrained net
% tic
% disp('running through pretrained net')
% for i = 1:length(testSet)
%     res
% 
% toc
%%
for N = Ns
tic
disp('running train set through dnn');
[netTrainSet, netTrainAnswers] = makeNetTrainSet(trainSet, trainAnswers, N, net);
toc
disp(['... for N = ', num2str(N)])
%% Training softmax classifier
tic
disp('training softmax classifier')
clf

x = netTrainSet';
t = netTrainAnswers';

nEpochs = 1500;
classifier = trainSoftmaxLayer(x,t,...
    'LossFunction', 'mse',...
    'MaxEpochs', 1,...
    'ShowProgressWindow',1,...
    'TrainingAlgorithm','trainscg');
disp('first epoch done');
classifier.divideFcn = 'dividerand';
classifier.divideParam.trainRatio = 0.7;
classifier.divideParam.valRatio = 0.15;
classifier.divideParam.testRatio = 0.15;
classifier.trainParam.epochs = nEpochs-1;
classifier.trainParam.goal = 0;
classifier.trainParam.time = 60*15;
classifier.trainParam.min_grad = 1e-6; %0.002; %1e-6?
classifier.trainParam.max_fail = 6; %80?
classifier.trainParam.sigma = 5e-5;
classifier.trainParam.lambda = 5e-7;
[classifier, TR] = train(classifier,x,t);

if k == 1
    normalTrainMSEs(N) = TR.best_perf
else
    crowdedTrainMSEs(N) = TR.best_perf
end
figure
plotperform(TR)

% y = classifier(netTrainSet');
% figure
% plotconfusion(t,y)
% toc


%% Testing the classifier
predictions = getClassifierPredictions(testSet,net,N,classifier);
if k == 1
    normalTestMSEs(N) = immse(testAnswers,predictions)
else
    crowdedTestMSEs(N) = immse(testAnswers,predictions)
end
clear classifier
end
end


%% Patternet classifier
disp('training patternet classifier');
% create classifier
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 05-Jul-2016 13:12:00
%
% This script assumes these variables are defined:
%
%   DNNTrainSet - input data.
%   DNNTrainAnswers - target data.

x = DNNTrainSet';
t = DNNTrainAnswers';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
% trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 100;
classifier = patternnet(hiddenLayerSize);


% Setup Division of Data for Training, Validation, Testing
classifier.divideParam.trainRatio = 70/100;
classifier.divideParam.valRatio = 15/100;
classifier.divideParam.testRatio = 15/100;

% Train the Network
[classifier,tr] = train(classifier,x,t);
toc

%% Get prediction
imSize = [50,50];
nSamples = 1;
D = 1:10;
T = 1:5;
L = 5:12;
dataType = 'uint8';
[left, ~, right, ~] = createCrowdedSampleSets(imSize,nSamples,D,T,L,dataType);
r = randi(2);
if r == 1
    stim = left(:,:,1);
else
    stim = right(:,:,1);
end
prediction = getOneClassifierPrediction(stim,net,N,classifier);
figure
imagesc(stim)
title(['prediction: ', num2str(prediction), '. (1 <-> vernier <-> ," )'])
